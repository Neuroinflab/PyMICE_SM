The IntelliCage system enables researchers to use sophisticated
experimental protocols and thus explore behavioral phenomena inaccessible in
classic, non-automated behavioral tests. However, in many cases, the analysis of
data from such experiments poses a serious challenge. First,
in some instances, manual analysis performed in the manufacturer's software
(Analyzer) would simply take too much time. For instance, analyzing data from
experiments in which one is interested in a particular time frame with respect
to a stimulus presented in the corner would be extremely time-consuming.
If, for example, the availability of a reward is signaled by LEDs in a
corner, and the diodes are only lit up in a specific time frame, then one would
be naturally interested in, say, number of nosepokes performed before, during, and
after the visual stimulus. Such information can-not be extracted from Analyzer
in an automated way, and therefore the researcher would have to inspect each of the
hundreds or thousands of visits manually. Another case
in which it is hard to obtain the relevant data
directly from Analyzer are
protocols assessing impulsiveness of individual subjects by
employing progressive ratio of behaviors (e.g., nosepokes) needed to obtain
a reward. On the other hand, such protocols are useful
for modeling symptoms of e.g. addiction~\cite{Radwanska:2012fd,Mijakowska:2015io}.

A solution to this problem is to write custom software for automated data analysis.
PyMICE is a free and open-source library that makes it easier
to access and analyze IntelliCage data in the Python programming language.

Moreover, PyMICE is more suitable than the Analyzer software when it comes to
the analysis of more sophisticated experimental designs~\cite{Endo:2011bs,Knapska:2013dj}.
Namely, it allows for the comprehensive analysis of variables than may not be computed in Analyzer.
Publication of \citeauthor{Knapska:2013dj} from \citeyearNP{Knapska:2013dj} is an example
of how highly specified behavioral assessment -- in this case choosing between nosepoking to reward vs.
to a neutral stimulus, performed right after entering a corner -- might be implemented
to identify neuronal circuits underlying specific cognitive deficits.
The analysis in that paper was done manually, which required substantial effort.
PyMICE facilitates drawing such conclusions by enabling experimenters
with an easy access to highly specific parameters describing subjects' behavioral performance.

For those reasons, we argue that PyMICE
is a convenient solution to otherwise time-consuming data analysis and -- more
importantly -- a valuable tool for in-depth analysis of previously inaccessible
elements of murine behavior.

One of the advantages of using the Python programming language is that
a well-written Python program is readable to users. In fact, readability
is stressed as one of the core Python principles~\cite{zenOfPython}, which we
have strived to follow in the design of PyMICE.
Our library provides IntelliCage data as a collection of
intuitively designed data structures (\fig{apiScheme}; Table~\ref{tableOfDataStructures}),
mirroring records written by the IntelliCage control software:
most of the record fields are represented by attributes of the same or
corresponding name. Also, auxiliary properties are provided, such as the \code{.Door}
property of a \code{Nosepoke} object (see \fig{apiScheme}) translating integer value of the
\code{.Side} attribute to \code{\textquotesingle{}left\textquotesingle} and \code{\textquotesingle{}right\textquotesingle} text strings.
Manipulating such structures is straightforward and natural, therefore shifting
the programmer's focus from technical details of the file format to the
data analysis itself.
The data structures are readonly objects\footnote{The two exceptions are: the
\code{Animal} semi-mutable class (the \code{.Sex} attribute might be updated
if \code{None}; the \code{.Notes} attribute might be extended) and the
\code{Group} mutable class.}, which supports the functional programming paradigm.

<<echo=False, results='hidden'>>=
LICKS_REPORTED_BY_ANALYSER = 1083

import pymice as pm
import pytz, datetime

timezone = pytz.timezone('Etc/GMT+8')
start = datetime.datetime(2014, 9, 11, 22, tzinfo=timezone)
end = datetime.datetime(2014, 9, 12, 4, tzinfo=timezone)

try:
  data = pm.Loader('2014-09-11 14.13.34.zip')
  visits = data.getVisits(start=start, end=end, mice='9')

except:
  licksMissingRelativePercentage = licksMissing = 'ERROR: unable to load datafile'

else:
  licksRecorded = sum(v.LickNumber for v in visits)
  licksMissing = licksRecorded - LICKS_REPORTED_BY_ANALYSER
  licksMissingRelativePercentage = int(round(100. * licksMissing / licksRecorded))

def asHours(timedelta):
  return int(round(timedelta.total_seconds() / 3600))
@
PyMICE operates on \emph{ZIP} archives saved by the IntelliCage software controlling
the experiment. Data from several recording sessions may be easily merged and analyzed
together.
All visits and nosepokes present in the raw data are loaded
and presented to the user without any implicit filtering. Note that in some cases this
leads to different results than those obtained with the Analyzer software bundled
with the IntelliCage. One specific case we are aware of is that
Analyzer (v.~2.11.0.0) omits some of the nosepokes present in the raw data,
leading to potentially significant underestimation of the measured quantities (the worst
case in the data we analyzed was <%= licksMissing %> licks of a single mouse missing within a <%= asHours(end - start) %>-h-long
period of a liquid consumption study -- $<%= licksMissingRelativePercentage %>\%$ of the total
recorded number).

The PyMICE library also facilitates automatic validation of the loaded
data. A collection of auxiliary classes is provided for that purpose.
Currently, possible RFID and lickometer failures may be detected automatically.
Such events are reported in the IntelliCage logs, respectively, as
\emph{Presence Errors} and \emph{Lickometer Warnings}. The set of detectable
abnormal situations may be easily extended.


\begin{figure*}
  \includegraphics[width=0.75\textwidth]{figures/apiScheme.pdf}
  \caption{
    {\bf Visualization of PyMICE data structures.}
    To investigate visit events recorded by the IntelliCage system, a \code{list}
    of \code{Visit} structures is obtained from the \code{data} object by the first
    command (top right panel). To focus on a third visit, the next command selects
    its item of index $2$ (pale blue). To check the name of the mouse performing
    the visit, the third command accesses the \code{.Animal} attribute of the
    \code{visit} (pale red). The attribute is an \code{Animal} structure and the
    next command prints its \code{.Name} attribute (yellow).
    \newline
    To further investigate which door was nosepoked during the visit, the
    \code{.Nosepokes} attribute (a \code{tuple}) must be accessed. The fifth
    command selects the first item (i.e., index $0$) of the \code{tuple}, which is a
    \code{Nosepoke} structure (pink). The last command prints its \code{.Door}
    property (pale green).
  }
  \label{apiScheme}
\end{figure*}


\begin{table}[!htbp]
\caption{
{\bf Data structures.} The data structures represent particular records
written by the IntelliCage control software. Most fields are represented
by attributes of the same or corresponding name.}
\begin{tabular}{|p{5cm}|l|l|}
\hline
{\bf IntelliCage data entity} & {\bf Data~structure (Python~class)} & {\bf Examples of attributes } \\ \hline
visit event & \code{Visit} & \code{.Start}, \code{.Corner}, \code{.Animal}, \code{.Nosepokes} \\ \hline
nosepoke event & \code{Nosepoke} & \code{.Start}, \code{.Side}, \code{.Visit}\\ \hline
sample of environmental condition & \code{EnvironmentalConditions} & \code{.DateTime}, \code{.Illumination}, \code{.Temperature} \\ \hline
log entry & \code{LogEntry} & \code{.DateTime}, \code{.Type}, \code{.Notes} \\ \hline
hardware event & \code{HardwareEvent} & \code{.DateTime},\code{.Type}, \code{.State} \\ \hline
animal & \code{Animal} & \code{.Name}, \code{.Sex}, \code{.Tag} \\ \hline
group of animals & \code{Group} & \code{.Name}, \code{.Animals} \\ \hline
\end{tabular}
\label{tableOfDataStructures}
\end{table}



